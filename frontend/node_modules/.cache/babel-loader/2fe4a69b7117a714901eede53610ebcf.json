{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hadee\\\\udacity\\\\project2\\\\frontend\\\\src\\\\components\\\\FormView.js\";\nimport React, { Component } from \"react\";\nimport $ from \"jquery\";\nimport \"../stylesheets/FormView.css\";\n\nclass FormView extends Component {\n  constructor(props) {\n    super();\n\n    this.submitQuestion = event => {\n      event.preventDefault(); // form validation\n\n      if (!this.handleValidation()) {} else {\n        $.ajax({\n          url: \"/questions\",\n          //TODO: update request URL\n          type: \"POST\",\n          dataType: \"json\",\n          contentType: \"application/json\",\n          data: JSON.stringify({\n            question: this.state.question,\n            answer: this.state.answer,\n            difficulty: this.state.difficulty,\n            category: this.state.category,\n            valid: this.state.formIsValid\n          }),\n          xhrFields: {\n            withCredentials: true\n          },\n          crossDomain: true,\n          success: result => {\n            alert(\"Your question was successfully added!\");\n            document.getElementById(\"add-question-form\").reset();\n            return;\n          },\n          error: error => {\n            alert(\"Unable to add question. Please try your request again \" + error);\n            return;\n          }\n        });\n      }\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.state = {\n      question: \"\",\n      answer: \"\",\n      difficulty: 1,\n      category: 1,\n      categories: {},\n      empty: \"\",\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: \"/categories\",\n      //TODO: update request URL\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert(\"Unable to load categories. Please try your request again\");\n        return;\n      }\n    });\n  }\n\n  handleValidation() {\n    let formIsValid = true;\n\n    if (this.state.question === \"\" && this.state.answer === \"\") {\n      this.setState({\n        error: true,\n        empty: \"Question and Answer feilds\"\n      });\n      formIsValid = false;\n    } else if (this.state.question === \"\") {\n      this.setState({\n        error: true,\n        empty: \"Question feild\"\n      });\n      formIsValid = false;\n    } else if (this.state.answer === \"\") {\n      this.setState({\n        error: true,\n        empty: \"Answer feild\"\n      });\n      formIsValid = false;\n    } else {\n      this.setState({\n        error: false\n      });\n    }\n\n    return formIsValid;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"add-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Add a New Trivia Question\"), React.createElement(\"h5\", {\n      className: \"\".concat(this.state.error ? \"error-msg\" : \"hide-error\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.state.empty, \" cannot be empty!\"), React.createElement(\"form\", {\n      className: \"form-view\",\n      id: \"add-question-form\",\n      onSubmit: this.submitQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Question\", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"question\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Answer\", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"answer\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Difficulty\", React.createElement(\"select\", {\n      name: \"difficulty\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"1\"), React.createElement(\"option\", {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"2\"), React.createElement(\"option\", {\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"3\"), React.createElement(\"option\", {\n      value: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"4\"), React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"5\"))), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Category\", React.createElement(\"select\", {\n      name: \"category\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, Object.keys(this.state.categories).map(id => {\n      return React.createElement(\"option\", {\n        key: id,\n        value: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, this.state.categories[id]);\n    }))), React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"button\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default FormView;","map":{"version":3,"sources":["C:\\Users\\hadee\\udacity\\project2\\frontend\\src\\components\\FormView.js"],"names":["React","Component","$","FormView","constructor","props","submitQuestion","event","preventDefault","handleValidation","ajax","url","type","dataType","contentType","data","JSON","stringify","question","state","answer","difficulty","category","valid","formIsValid","xhrFields","withCredentials","crossDomain","success","result","alert","document","getElementById","reset","error","handleChange","setState","target","name","value","categories","empty","componentDidMount","render","Object","keys","map","id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport \"../stylesheets/FormView.css\";\r\n\r\nclass FormView extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      question: \"\",\r\n      answer: \"\",\r\n      difficulty: 1,\r\n      category: 1,\r\n      categories: {},\r\n      empty: \"\",\r\n      error: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    $.ajax({\r\n      url: `/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories });\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert(\"Unable to load categories. Please try your request again\");\r\n        return;\r\n      },\r\n    });\r\n  }\r\n\r\n  submitQuestion = (event) => {\r\n    event.preventDefault();\r\n    // form validation\r\n    if (!this.handleValidation()) {\r\n    } else {\r\n      $.ajax({\r\n        url: \"/questions\", //TODO: update request URL\r\n        type: \"POST\",\r\n        dataType: \"json\",\r\n        contentType: \"application/json\",\r\n        data: JSON.stringify({\r\n          question: this.state.question,\r\n          answer: this.state.answer,\r\n          difficulty: this.state.difficulty,\r\n          category: this.state.category,\r\n          valid: this.state.formIsValid,\r\n        }),\r\n        xhrFields: {\r\n          withCredentials: true,\r\n        },\r\n        crossDomain: true,\r\n        success: (result) => {\r\n          alert(\"Your question was successfully added!\");\r\n          document.getElementById(\"add-question-form\").reset();\r\n          return;\r\n        },\r\n        error: (error) => {\r\n          alert(\"Unable to add question. Please try your request again \"+error);\r\n          return;\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  handleValidation() {\r\n    let formIsValid = true;\r\n    if (this.state.question === \"\" && this.state.answer === \"\") {\r\n      this.setState({\r\n        error: true,\r\n        empty: \"Question and Answer feilds\",\r\n      });\r\n      formIsValid = false;\r\n    } else if (this.state.question === \"\") {\r\n      this.setState({\r\n        error: true,\r\n        empty: \"Question feild\",\r\n      });\r\n      formIsValid = false;\r\n    } else if (this.state.answer === \"\") {\r\n      this.setState({ error: true, empty: \"Answer feild\" });\r\n      formIsValid = false;\r\n    } else {\r\n      this.setState({ error: false });\r\n    }\r\n\r\n    return formIsValid;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"add-form\">\r\n        <h2>Add a New Trivia Question</h2>\r\n        <h5 className={`${this.state.error ? \"error-msg\" : \"hide-error\"}`}>\r\n          {this.state.empty} cannot be empty!\r\n        </h5>\r\n        <form\r\n          className=\"form-view\"\r\n          id=\"add-question-form\"\r\n          onSubmit={this.submitQuestion}\r\n        >\r\n          <label>\r\n            Question\r\n            <input type=\"text\" name=\"question\" onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n            Answer\r\n            <input type=\"text\" name=\"answer\" onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n            Difficulty\r\n            <select name=\"difficulty\" onChange={this.handleChange}>\r\n              <option value=\"1\">1</option>\r\n              <option value=\"2\">2</option>\r\n              <option value=\"3\">3</option>\r\n              <option value=\"4\">4</option>\r\n              <option value=\"5\">5</option>\r\n            </select>\r\n          </label>\r\n          <label>\r\n            Category\r\n            <select name=\"category\" onChange={this.handleChange}>\r\n              {Object.keys(this.state.categories).map((id) => {\r\n                return (\r\n                  <option key={id} value={id}>\r\n                    {this.state.categories[id]}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          </label>\r\n          <input type=\"submit\" className=\"button\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormView;\r\n"]},"metadata":{},"sourceType":"module"}